name: Verify Build Workflow
on:
  push:
    paths-ignore:
      - '.gitignore'
      - 'LICENSE'
      - 'README*'
      - 'CODE_OF_CONDUCT*'
    branches: [master, 2.x]
  pull_request:
    paths-ignore:
      - '.github/**'
      - '.gitignore'
      - 'LICENSE'
      - 'README*'
      - 'CODE_OF_CONDUCT*'
    branches: [master, 2.x]

jobs:
  build-verify:
    name: Verify Build
    runs-on: ubuntu-latest
    if: github.repository_owner == 'Apiman'
    outputs:
      apiman-version: ${{ steps.apiman-version-data.outputs.apiman-version }}
      is-snapshot-version: ${{ steps.apiman-version-data.outputs.is-snapshot-version }}

    strategy:
      matrix:
        java: [ 11, 17 ]
        integration-suite:
          # Default, empty string to avoid setting
          - name: Default configuration (JPA)
            command: " "
          # Servlet elasticsearch
          - name: Servlet with Elasticsearch gateway
            command: -Dapiman.gateway-test.config=servlet-es
          # Vert.x in-memory gateway
          - name: Vert.x with in-memory registry
            command: -Dapiman.gateway-test.config=vertx3-mem
          # Vert.x elasticsearch
          - name: Vert.x with Elasticsearch registry
            command: -Dapiman.gateway-test.config=vertx3-es

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: ${{ matrix.java }}
          cache: maven

      - name: Get Apiman version
        id: apiman-version-data
        run: |
          export APIMAN_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "::set-output name=apiman-version::$APIMAN_VERSION"
          if [[ "$APIMAN_VERSION" =~ "SNAPSHOT" ]]
          then
            echo "::set-output name=is-snapshot-version::true"
          else
            echo "::set-output name=is-snapshot-version::false"
          fi

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Build Project (including /parent)
        run: ./fastbuild.sh

      - name: Run platform-specific integration tests (${{ matrix.integration-suite.name }})
        run: ./mvnw test install -Dinvoker.skip -Dmaven.javadoc.skip=true -B ${{ matrix.integration-suite.command }}

      - name: Test Summary
        uses: test-summary/action@v1
        with:
          paths: '**/target/surefire-reports/TEST-*.xml'
        if: always()

  e2e:
    name: Cypress end-to-end testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK 11 (for deploying assets, docker builds, etc)
        uses: actions/setup-java@v2
        with:
          distribution: adopt
          cache: maven
          java-version: 11
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Build latest docker image locally & run Cypress
        run: |
          cd manager/ui/war
          yarn install --frozen-lockfile
          yarn apiman:rebuild
          yarn ci
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_DASHBOARD_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-snapshots:
    name: Publish master snapshot artifacts
    runs-on: ubuntu-latest
    env:
      APIMAN_VERSION: ${{ needs.build-verify.outputs.apiman-version }}
      IS_SNAPSHOT_VERSION: ${{ needs.build-verify.outputs.is-snapshot-version }}

    # Export if version contains "SNAPSHOT" only
    if: ${{ needs.build-verify.outputs.is-snapshot-version }} && startsWith(github.ref, 'refs/heads/') && github.ref == 'refs/heads/master' && github.repository_owner == 'Apiman'
    needs: [ build-verify, e2e ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Tag/retag snapshot
        run: |
          echo "Version: $APIMAN_VERSION"
          echo "Is Snapshot: $IS_SNAPSHOT_VERSION"
          git config --global user.name "$GITHUB_ACTOR"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a -f -m "Snapshot tag: $APIMAN_VERSION" $APIMAN_VERSION 

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            
      - name: Set up JDK 11 (for deploying assets, docker builds, etc)
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: 'Apiman Parent: Build and deploy POM/BOM & deploy to OSSRH Snapshots'
        run: |
          cd parent
          sh ../mvnw -B clean install
          sh ../mvnw -B deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}

      - name: 'Apiman: Build and deploy main project to OSSRH Snapshots'
        run: |
          ./mvnw -B deploy -DskipTests -Dmaven.test.skip=true
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create/update GitHub snapshot release $APIMAN_VERSION
        uses: softprops/action-gh-release@v1
        with:
          tag_name: $APIMAN_VERSION
          name: $APIMAN_VERSION
          body: Snapshot $APIMAN_VERSION. This is not a production-grade release!
          prerelease: true
          files: |
            distro/wildfly/target/apiman-distro-wildfly-$APIMAN_VERSION-overlay.zip
            distro/vertx/target/apiman-distro-vertx-$APIMAN_VERSION.zip
            distro/tomcat/target/apiman-distro-tomcat-$APIMAN_VERSION-overlay.zip
